// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  store_id   String   @id @default(uuid())
  store_name String
  location   String

  users           User[]               @relation("StoreUsers")
  inventory       Inventory[]
  orders          Order[]
  fittingCarts    FittingCart[]
  analytics       Analytics[]
  virtualCarts    VirtualCart[]
  fittingRequests FittingRoomRequest[]
}

model User {
  user_id       String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  password_hash String
  role          Role
  store_id      String?
  created_at    DateTime? @default(now())
  updated_at    DateTime? @updatedAt

  store           Store?               @relation("StoreUsers", fields: [store_id], references: [store_id])
  carts           VirtualCart[]
  fittingCarts    FittingCart[]
  orders          Order[]
  wishlists       Wishlist[]
  analytics       Analytics[]
  fittingRequests FittingRoomRequest[]
}

model Product {
  product_id  String @id @default(uuid())
  name        String
  description String
  price       Float
  category    String

  variants  ProductVariant[]
  inventory Inventory[]
}

model ProductVariant {
  variant_id String @id @default(uuid())
  product_id String
  size       String
  color      String

  product         Product              @relation(fields: [product_id], references: [product_id])
  inventory       Inventory[]
  cartItems       CartItem[]
  orderDetails    OrderDetail[]
  wishlistItems   WishlistItem[]
  analytics       Analytics[]
  fittingRequests FittingRoomRequest[] @relation("VariantRequests")
}

model Inventory {
  inventory_id String      @id @default(uuid())
  store_id     String
  product_id   String
  variant_id   String
  quantity     Int
  status       StockStatus
  last_updated DateTime    @updatedAt

  store   Store          @relation(fields: [store_id], references: [store_id])
  product Product        @relation(fields: [product_id], references: [product_id])
  variant ProductVariant @relation(fields: [variant_id], references: [variant_id])
}

model VirtualCart {
  cart_id    String   @id @default(uuid())
  user_id    String? // optional user - allows creation of cart for guest
  store_id   String
  created_at DateTime @default(now())
  expires_at DateTime

  user  User?      @relation(fields: [user_id], references: [user_id])
  store Store      @relation(fields: [store_id], references: [store_id])
  items CartItem[]
}

model CartItem {
  cart_item_id  String @id @default(uuid())
  cart_id       String
  variant_id    String
  quantity      Int
  price_at_time Float

  cart    VirtualCart    @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variant_id], references: [variant_id])
}

model FittingCart {
  fitting_cart_id String   @id @default(uuid())
  user_id         String?
  store_id        String
  created_at      DateTime @default(now())
  expires_at      DateTime

  user     User?                @relation(fields: [user_id], references: [user_id])
  store    Store                @relation(fields: [store_id], references: [store_id])
  requests FittingRoomRequest[]
}

model FittingRoomRequest {
  request_id      String        @id @default(uuid())
  fitting_cart_id String
  user_id         String?
  store_id        String
  fitting_room_id String
  variant_id      String
  status          RequestStatus @default(pending)
  created_at      DateTime      @default(now())

  fittingCart FittingCart    @relation(fields: [fitting_cart_id], references: [fitting_cart_id])
  user        User?          @relation(fields: [user_id], references: [user_id])
  store       Store          @relation(fields: [store_id], references: [store_id])
  variant     ProductVariant @relation("VariantRequests", fields: [variant_id], references: [variant_id])
}

model Order {
  order_id     String      @id @default(uuid())
  user_id      String
  store_id     String
  order_status OrderStatus
  total_amount Float
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  user    User          @relation(fields: [user_id], references: [user_id])
  store   Store         @relation(fields: [store_id], references: [store_id])
  details OrderDetail[]
}

model OrderDetail {
  order_detail_id   String @id @default(uuid())
  order_id          String
  variant_id        String
  quantity          Int
  price_at_purchase Float

  order   Order          @relation(fields: [order_id], references: [order_id])
  variant ProductVariant @relation(fields: [variant_id], references: [variant_id])
}

model Wishlist {
  wishlist_id String @id @default(uuid())
  user_id     String

  user  User           @relation(fields: [user_id], references: [user_id])
  items WishlistItem[]
}

model WishlistItem {
  wishlist_item_id String @id @default(uuid())
  wishlist_id      String
  variant_id       String

  wishlist Wishlist       @relation(fields: [wishlist_id], references: [wishlist_id])
  variant  ProductVariant @relation(fields: [variant_id], references: [variant_id])
}

model Analytics {
  analytics_id String    @id @default(uuid())
  event_type   EventType
  variant_id   String?
  user_id      String?
  store_id     String?
  timestamp    DateTime  @default(now())
  weight       Float?

  variant ProductVariant? @relation(fields: [variant_id], references: [variant_id])
  user    User?           @relation(fields: [user_id], references: [user_id])
  store   Store?          @relation(fields: [store_id], references: [store_id])
}

// Enums
enum Role {
  customer
  store_manager
  employee
}

enum StockStatus {
  available
  unavailable
  discontinued
}

enum RequestStatus {
  pending
  fulfilled
  cancelled
}

enum OrderStatus {
  pending
  completed
  cancelled
}

enum EventType {
  NFC_scan
  add_to_cart
  purchase
  checkout
}
